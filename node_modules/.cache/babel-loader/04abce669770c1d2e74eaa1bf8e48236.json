{"ast":null,"code":"import * as yup from \"yup\";\nconst dateTostring = date => {\n  var _birthDate$2$split;\n  const birthDate = date === null || date === void 0 ? void 0 : date.split('-');\n  const year = birthDate === null || birthDate === void 0 ? void 0 : birthDate[0];\n  const month = birthDate === null || birthDate === void 0 ? void 0 : birthDate[1];\n  const day = birthDate === null || birthDate === void 0 ? void 0 : (_birthDate$2$split = birthDate[2].split('T')) === null || _birthDate$2$split === void 0 ? void 0 : _birthDate$2$split[0];\n  const result = `${day}/${month}/${year}`;\n  return !date ? '' : result;\n};\nconst stringToDate = date => {\n  if (!date) return undefined;\n  const birthDate = date.split('/');\n  const day = Number(birthDate[0]);\n  const month = Number(birthDate[1]);\n  const year = Number(birthDate[2]);\n  const result = new Date(+year, month - 1, +day);\n  return result;\n};\nconst removeSpecialCharacters = data => {\n  if (data) return data.replace(/\\D+/g, '');\n  return null;\n};\nconst handleValidateDate = birthDate => {\n  const selectedDate = stringToDate(birthDate);\n  const todayDate = new Date();\n  if (!selectedDate || selectedDate > todayDate) {\n    return 'Data inválida';\n  }\n  const selectedYear = Number(birthDate.slice(birthDate.length - 4));\n  // 130 is the oldest human living\n  const validYear = todayDate.getFullYear() - 130;\n  if (selectedYear < validYear) {\n    return 'Data inválida';\n  }\n  return true;\n};\nconst userRegex = {\n  email: /^ *([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-.]+)\\.([a-zA-Z]{2,6}) *$/,\n  date: /^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)(?:0?2|(?:Feb))\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})/i,\n  cpf: /(\\d{3}).(\\d{3}).(\\d{3})-(\\d{2})/,\n  brazilianCellphone: /^\\+?\\d{2}?\\s*\\(\\d{2}\\)?\\s*\\d{4,5}-?\\d{4}$/g\n};\nconst handleValidateDocument = (documentText, disabled) => {\n  if (!documentText) {\n    return 'CPF obrigatório';\n  }\n  if (!disabled && !documentText.match(userRegex.cpf)) {\n    return 'CPF inválido';\n  }\n  return true;\n};\nconst maskCPF = value => {\n  return value.replace(/\\D/g, '').replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d)/, '$1.$2').replace(/(\\d{3})(\\d{1,2})/, '$1-$2').replace(/(-\\d{2})\\d+?$/, '$1');\n};\nconst maskPhone = value => {\n  return value.replace(/\\D/g, '').replace(/(\\d{2})(\\d)/, '($1) $2').replace(/(\\d)(\\d{4})$/, '$1-$2');\n};\nconst schema = yup.object({\n  name: yup.string().min(3, \"Nome inválido\").required(\"Campo Obrigatório\"),\n  email: yup.string().email(\"Digite um email válido\").required(\"O email é obrigatório\"),\n  birthdate: yup.string().min(8, \"Nome inválido\").required(\"Campo Obrigatório\"),\n  fone: yup.string().required(\"Campo Obrigatório\"),\n  password: yup.string().min(6, \"A senha deve ter pelo menos 6 digitos\").required(\"A senha é obrigatória\"),\n  confirmPassword: yup.string().required(\"Confirmar a senha é obrigatório\").oneOf([yup.ref(\"password\")], \"As senhas devem ser iguais\")\n}).required();\nexport { dateTostring, stringToDate, removeSpecialCharacters, handleValidateDate, handleValidateDocument, maskCPF, maskPhone, schema };","map":{"version":3,"names":["yup","dateTostring","date","birthDate","split","year","month","day","result","stringToDate","undefined","Number","Date","removeSpecialCharacters","data","replace","handleValidateDate","selectedDate","todayDate","selectedYear","slice","length","validYear","getFullYear","userRegex","email","cpf","brazilianCellphone","handleValidateDocument","documentText","disabled","match","maskCPF","value","maskPhone","schema","object","name","string","min","required","birthdate","fone","password","confirmPassword","oneOf","ref"],"sources":["C:/_PROJETOS/Agenda_Aniversariantes/src/utils/validaitionsForm/index.ts"],"sourcesContent":["import * as yup from \"yup\";\r\n\r\n\r\nconst dateTostring = (date?: string | null): string => {\r\n  const birthDate = date?.split('-')\r\n  const year = birthDate?.[0]\r\n  const month = birthDate?.[1]\r\n  const day = birthDate?.[2].split('T')?.[0]\r\n  const result = `${day}/${month}/${year}`\r\n  return !date ? '' : result\r\n}\r\n\r\nconst stringToDate = (date?: string): Date | undefined => {\r\n  if (!date) return undefined\r\n  const birthDate = date.split('/')\r\n  const day = Number(birthDate[0])\r\n  const month = Number(birthDate[1])\r\n  const year = Number(birthDate[2])\r\n  const result = new Date(+year, month - 1, +day)\r\n  return result\r\n}\r\n\r\nconst removeSpecialCharacters = (data: string | null) => {\r\n  if (data) return data.replace(/\\D+/g, '')\r\n  return null\r\n}\r\n\r\nconst handleValidateDate = (birthDate: string): boolean | string => {\r\n  const selectedDate = stringToDate(birthDate)\r\n  const todayDate = new Date()\r\n  if (!selectedDate || selectedDate > todayDate) {\r\n    return 'Data inválida'\r\n  }\r\n  const selectedYear = Number(birthDate.slice(birthDate.length - 4))\r\n  // 130 is the oldest human living\r\n  const validYear = todayDate.getFullYear() - 130\r\n\r\n  if (selectedYear < validYear) {\r\n    return 'Data inválida'\r\n  }\r\n  return true\r\n}\r\n\r\nconst userRegex = {\r\n  email: /^ *([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-.]+)\\.([a-zA-Z]{2,6}) *$/,\r\n  date: /^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)(?:0?2|(?:Feb))\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})/i,\r\n  cpf: /(\\d{3}).(\\d{3}).(\\d{3})-(\\d{2})/,\r\n  brazilianCellphone: /^\\+?\\d{2}?\\s*\\(\\d{2}\\)?\\s*\\d{4,5}-?\\d{4}$/g\r\n}\r\n\r\nconst handleValidateDocument = (\r\n  documentText: string,\r\n  disabled?: boolean\r\n): boolean | string => {\r\n  if (!documentText) {\r\n    return 'CPF obrigatório'\r\n  }\r\n  if (!disabled && !documentText.match(userRegex.cpf)) {\r\n    return 'CPF inválido'\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nconst maskCPF = (value: string) => {\r\n  return value\r\n    .replace(/\\D/g, '')\r\n    .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n    .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n    .replace(/(\\d{3})(\\d{1,2})/, '$1-$2')\r\n    .replace(/(-\\d{2})\\d+?$/, '$1')\r\n}\r\n\r\nconst maskPhone = (value: string) => {\r\n  return value\r\n    .replace(/\\D/g, '')\r\n    .replace(/(\\d{2})(\\d)/, '($1) $2')\r\n    .replace(/(\\d)(\\d{4})$/, '$1-$2')\r\n}\r\n\r\n\r\nconst schema = yup.object({\r\n  name: yup\r\n  .string()\r\n  .min(3, \"Nome inválido\")\r\n  .required(\"Campo Obrigatório\"),\r\n\r\n  email: yup\r\n  .string()\r\n  .email(\"Digite um email válido\")\r\n  .required(\"O email é obrigatório\"),\r\n\r\n  birthdate: yup\r\n  .string()\r\n  .min(8, \"Nome inválido\")\r\n  .required(\"Campo Obrigatório\"),\r\n\r\n  fone: yup\r\n  .string()\r\n  .required(\"Campo Obrigatório\"),\r\n\r\n  password: yup\r\n  .string()\r\n  .min(6, \"A senha deve ter pelo menos 6 digitos\")\r\n  .required(\"A senha é obrigatória\"),\r\n\r\nconfirmPassword: yup\r\n  .string()\r\n  .required(\"Confirmar a senha é obrigatório\")\r\n  .oneOf([yup.ref(\"password\")], \"As senhas devem ser iguais\"),\r\n})\r\n.required();\r\n\r\n\r\n\r\nexport {\r\n  dateTostring,\r\n  stringToDate,\r\n  removeSpecialCharacters,\r\n  handleValidateDate,\r\n  handleValidateDocument,\r\n  maskCPF,\r\n  maskPhone,\r\n  schema\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}